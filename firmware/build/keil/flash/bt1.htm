<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\flash\bt1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\flash\bt1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Mar 14 00:50:58 2016
<BR><P>
<H3>Maximum Stack Usage =       1104 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
output &rArr; queuebuf_new_from_packetbuf &rArr; packetbuf_copyto &rArr; __2sprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e9]">exit_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[eb]">call_process</a><BR>
 <LI><a href="#[14]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">NMI_Handler</a><BR>
 <LI><a href="#[15]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">HardFault_Handler</a><BR>
 <LI><a href="#[16]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">MemManage_Handler</a><BR>
 <LI><a href="#[17]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">BusFault_Handler</a><BR>
 <LI><a href="#[18]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">UsageFault_Handler</a><BR>
 <LI><a href="#[19]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">SVC_Handler</a><BR>
 <LI><a href="#[1a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">DebugMon_Handler</a><BR>
 <LI><a href="#[1b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">PendSV_Handler</a><BR>
 <LI><a href="#[32]">CAN1_RX1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">CAN1_RX1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC1_2_IRQHandler</a> from adc.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">EXTI0_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[45]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">EXTI3_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[46]">RTCAlarm_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">SysTick_Handler</a> from clock.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">TIM2_IRQHandler</a> from rtimer-arch.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">USART1_IRQHandler</a> from uart1.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">USART3_IRQHandler</a> from uart3.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[47]">USBWakeUp_IRQHandler</a> from exti.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[49]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[57]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[f]">best_dag</a> from rpl-mrhof.o(.text) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[e]">best_parent</a> from rpl-mrhof.o(.text) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[10]">calculate_rank</a> from rpl-mrhof.o(.text) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[62]">channel_check_interval</a> from csma.o(.text) referenced 2 times from csma.o(.constdata)
 <LI><a href="#[6e]">channel_clear</a> from cc1200.o(.text) referenced from cc1200.o(.constdata)
 <LI><a href="#[67]">configure</a> from button-sensor.o(.text) referenced from button-sensor.o(.constdata)
 <LI><a href="#[5b]">create</a> from framer-802154.o(.text) referenced from framer-802154.o(.constdata)
 <LI><a href="#[b]">dao_ack_input</a> from rpl-icmp6.o(.text) referenced 2 times from rpl-icmp6.o(.data)
 <LI><a href="#[a]">dao_input</a> from rpl-icmp6.o(.text) referenced 2 times from rpl-icmp6.o(.data)
 <LI><a href="#[9]">dio_input</a> from rpl-icmp6.o(.text) referenced 2 times from rpl-icmp6.o(.data)
 <LI><a href="#[8]">dis_input</a> from rpl-icmp6.o(.text) referenced 2 times from rpl-icmp6.o(.data)
 <LI><a href="#[6]">echo_reply_input</a> from uip-icmp6.o(.text) referenced 2 times from uip-icmp6.o(.data)
 <LI><a href="#[5]">echo_request_input</a> from uip-icmp6.o(.text) referenced 2 times from uip-icmp6.o(.data)
 <LI><a href="#[56]">fputc</a> from dbg.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[75]">get_object</a> from cc1200.o(.text) referenced from cc1200.o(.constdata)
 <LI><a href="#[73]">get_value</a> from cc1200.o(.text) referenced from cc1200.o(.constdata)
 <LI><a href="#[51]">handle_dao_timer</a> from rpl-timers.o(.text) referenced from rpl-timers.o(.text)
 <LI><a href="#[4f]">handle_dio_timer</a> from rpl-timers.o(.text) referenced from rpl-timers.o(.text)
 <LI><a href="#[50]">handle_periodic_timer</a> from rpl-timers.o(.text) referenced from rpl-timers.o(.text)
 <LI><a href="#[53]">handle_probing_timer</a> from rpl-timers.o(.text) referenced from rpl-timers.o(.text)
 <LI><a href="#[52]">handle_unicast_dio_timer</a> from rpl-timers.o(.text) referenced from rpl-timers.o(.text)
 <LI><a href="#[5a]">hdr_length</a> from framer-802154.o(.text) referenced from framer-802154.o(.constdata)
 <LI><a href="#[5d]">init</a> from csma.o(.text) referenced 4 times from csma.o(.constdata)
 <LI><a href="#[59]">input</a> from sicslowpan.o(.text) referenced 2 times from sicslowpan.o(.constdata)
 <LI><a href="#[5f]">input_packet</a> from csma.o(.text) referenced 2 times from csma.o(.constdata)
 <LI><a href="#[48]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4e]">nbr_callback</a> from rpl-dag.o(.text) referenced from rpl-dag.o(.text)
 <LI><a href="#[d]">neighbor_link_callback</a> from rpl-mrhof.o(.text) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[61]">off</a> from csma.o(.text) referenced 3 times from csma.o(.constdata)
 <LI><a href="#[60]">on</a> from csma.o(.text) referenced 3 times from csma.o(.constdata)
 <LI><a href="#[4b]">output</a> from sicslowpan.o(.text) referenced from sicslowpan.o(.text)
 <LI><a href="#[4a]">packet_sent</a> from sicslowpan.o(.text) referenced 2 times from sicslowpan.o(.text)
 <LI><a href="#[4d]">packet_timedout</a> from uip-packetqueue.o(.text) referenced from uip-packetqueue.o(.text)
 <LI><a href="#[5c]">parse</a> from framer-802154.o(.text) referenced from framer-802154.o(.constdata)
 <LI><a href="#[70]">pending_packet</a> from cc1200.o(.text) referenced from cc1200.o(.constdata)
 <LI><a href="#[6a]">prepare</a> from cc1200.o(.text) referenced from cc1200.o(.constdata)
 <LI><a href="#[12]">process_thread_cc1200_process</a> from cc1200.o(.text) referenced 2 times from cc1200.o(.data)
 <LI><a href="#[4]">process_thread_ctimer_process</a> from ctimer.o(.text) referenced 2 times from ctimer.o(.data)
 <LI><a href="#[3]">process_thread_etimer_process</a> from etimer.o(.text) referenced 2 times from etimer.o(.data)
 <LI><a href="#[2]">process_thread_hello_world_process1</a> from hello-world1.o(.text) referenced 2 times from hello-world1.o(.data)
 <LI><a href="#[0]">process_thread_hello_world_process2</a> from hello-world1.o(.text) referenced 2 times from hello-world1.o(.data)
 <LI><a href="#[1]">process_thread_hello_world_process3</a> from hello-world1.o(.text) referenced 2 times from hello-world1.o(.data)
 <LI><a href="#[7]">process_thread_tcpip_process</a> from tcpip.o(.text) referenced 2 times from tcpip.o(.data)
 <LI><a href="#[6d]">read</a> from cc1200.o(.text) referenced from cc1200.o(.constdata)
 <LI><a href="#[6f]">receiving_packet</a> from cc1200.o(.text) referenced from cc1200.o(.constdata)
 <LI><a href="#[c]">reset</a> from rpl-mrhof.o(.text) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[4c]">rm_routelist_callback</a> from uip-ds6-route.o(.text) referenced from uip-ds6-route.o(.text)
 <LI><a href="#[64]">send</a> from nullsec.o(.text) referenced 2 times from nullsec.o(.constdata)
 <LI><a href="#[79]">send_list</a> from sicslowmac.o(.text) referenced from sicslowmac.o(.constdata)
 <LI><a href="#[5e]">send_packet</a> from csma.o(.text) referenced 2 times from csma.o(.constdata)
 <LI><a href="#[76]">set_object</a> from cc1200.o(.text) referenced from cc1200.o(.constdata)
 <LI><a href="#[74]">set_value</a> from cc1200.o(.text) referenced from cc1200.o(.constdata)
 <LI><a href="#[58]">sicslowpan_init</a> from sicslowpan.o(.text) referenced from sicslowpan.o(.constdata)
 <LI><a href="#[68]">status</a> from button-sensor.o(.text) referenced from button-sensor.o(.constdata)
 <LI><a href="#[6b]">transmit</a> from cc1200.o(.text) referenced from cc1200.o(.constdata)
 <LI><a href="#[54]">transmit_packet_list</a> from csma.o(.text) referenced 2 times from csma.o(.text)
 <LI><a href="#[17f]">uip_ds6_nbr_rm</a> from uip-ds6-nbr.o(.text) referenced from uip-ds6-nbr.o(.text)
 <LI><a href="#[11]">update_metric_container</a> from rpl-mrhof.o(.text) referenced 2 times from rpl-mrhof.o(.data)
 <LI><a href="#[66]">value</a> from button-sensor.o(.text) referenced from button-sensor.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[243]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[23d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[244]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[245]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[246]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[247]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[248]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[80]"></a>rng_get_uint8</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rng_get_uint8 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartADC
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_ADC_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[87]"></a>initialize</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = initialize &rArr; ctimer_init &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_get_eui64
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_set_node_addr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_get_uint8
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>main</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; initialize &rArr; ctimer_init &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_periodic
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_stats
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_seconds
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_add
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a3]"></a>uip_log</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uip-log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uip_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo48
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[249]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[a8]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[21d]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[24a]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>

<P><STRONG><a name="[24b]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[a9]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[25a]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPM_ADC_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[26c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[26d]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; USART3_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[89]"></a>EXTI_Init</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[23]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = EXTI0_IRQHandler &rArr; cc1200_int_handler &rArr; cc1200_rx_interrupt &rArr; addr_check_auto_ack &rArr; idle_tx_rx &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_int_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = EXTI3_IRQHandler &rArr; cc1200_int_handler &rArr; cc1200_rx_interrupt &rArr; addr_check_auto_ack &rArr; idle_tx_rx &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_int_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exti.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[274]"></a>SPI_InitLowFreq</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>SPI_InitHighFreq</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_init
</UL>

<P><STRONG><a name="[275]"></a>SPI_DeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>halSpiWriteByte</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw_byte
</UL>

<P><STRONG><a name="[276]"></a>halSpiWriteMutilByte</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>halSpiReadMutilByte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>halSpiBegin</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw_byte
</UL>

<P><STRONG><a name="[ad]"></a>USART1_Init</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
</UL>

<P><STRONG><a name="[278]"></a>USART1_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart1.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>USART1_PutChar</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutString
</UL>

<P><STRONG><a name="[b2]"></a>USART1_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
</UL>

<P><STRONG><a name="[279]"></a>USART1_GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart1.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[b4]"></a>RTC_SanityCheck</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[8a]"></a>RTC_Init</STRONG> (Thumb, 192 bytes, Stack size 4 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SanityCheck
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[b7]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounterX
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[b8]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounterX
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[b6]"></a>RTC_SetCounterX</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[b9]"></a>RTC_SetCounter</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[ba]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[ae]"></a>RINGBUF_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ampm_ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[b1]"></a>RINGBUF_Put</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ampm_ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RINGBUF_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
</UL>

<P><STRONG><a name="[b3]"></a>RINGBUF_Get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ampm_ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>RINGBUF_GetFill</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ampm_ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_PutChar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
</UL>

<P><STRONG><a name="[2f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, adc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>StartADC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_get_uint8
</UL>

<P><STRONG><a name="[81]"></a>AMPM_ADC_Init</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AMPM_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_get_uint8
</UL>

<P><STRONG><a name="[8b]"></a>USART3_Init</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[27a]"></a>USART3_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>USART3_PutChar</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_PutChar &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_GetFill
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutString
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[bc]"></a>USART3_PutString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PutChar
</UL>

<P><STRONG><a name="[27b]"></a>USART3_GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>USART3_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; RINGBUF_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Put
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINGBUF_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>leds_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, leds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = leds_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_arch_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[c0]"></a>leds_toggle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, leds.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_leds
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_blink
</UL>

<P><STRONG><a name="[c1]"></a>leds_blink</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, leds.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_delay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_toggle
</UL>

<P><STRONG><a name="[c3]"></a>leds_get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, leds.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_arch_get
</UL>

<P><STRONG><a name="[c5]"></a>leds_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, leds.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_leds
</UL>

<P><STRONG><a name="[c6]"></a>leds_on</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, leds.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_leds
</UL>

<P><STRONG><a name="[c7]"></a>leds_off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, leds.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_leds
</UL>

<P><STRONG><a name="[bf]"></a>leds_arch_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, leds-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
</UL>

<P><STRONG><a name="[c4]"></a>leds_arch_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, leds-arch.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_get
</UL>

<P><STRONG><a name="[be]"></a>leds_arch_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, leds-arch.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_leds
</UL>

<P><STRONG><a name="[ac]"></a>cc1200_int_handler</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, cc1200-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cc1200_int_handler &rArr; cc1200_rx_interrupt &rArr; addr_check_auto_ack &rArr; idle_tx_rx &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_rx_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>cc1200_arch_spi_select</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cc1200-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burst_read
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_read
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burst_write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobe
</UL>

<P><STRONG><a name="[d8]"></a>cc1200_arch_spi_deselect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cc1200-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burst_read
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_read
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burst_write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobe
</UL>

<P><STRONG><a name="[ca]"></a>cc1200_arch_spi_rw_byte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cc1200-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cc1200_arch_spi_rw_byte &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiBegin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burst_read
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_read
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burst_write
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobe
</UL>

<P><STRONG><a name="[cd]"></a>cc1200_arch_spi_rw</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cc1200-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cc1200_arch_spi_rw &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiBegin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burst_read
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burst_write
</UL>

<P><STRONG><a name="[235]"></a>cc1200_arch_gpio0_setup_irq</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, cc1200-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[236]"></a>cc1200_arch_gpio2_setup_irq</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, cc1200-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[ce]"></a>cc1200_arch_gpio0_enable_irq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cc1200-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cc1200_arch_gpio0_enable_irq &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_rx
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_calibrate_rx
</UL>

<P><STRONG><a name="[d2]"></a>cc1200_arch_gpio0_disable_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cc1200-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cc1200_arch_gpio0_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>

<P><STRONG><a name="[d4]"></a>cc1200_arch_gpio2_enable_irq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cc1200-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cc1200_arch_gpio2_enable_irq &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_rx
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_calibrate_rx
</UL>

<P><STRONG><a name="[d5]"></a>cc1200_arch_gpio2_disable_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cc1200-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cc1200_arch_gpio2_disable_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>

<P><STRONG><a name="[225]"></a>cc1200_arch_gpio0_read_pin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cc1200-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_clear
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiving_packet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
</UL>

<P><STRONG><a name="[22b]"></a>cc1200_arch_gpio2_read_pin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cc1200-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
</UL>

<P><STRONG><a name="[27c]"></a>cc1200_arch_gpio3_read_pin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cc1200-arch.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>cc1200_arch_init</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, cc1200-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cc1200_arch_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_deselect
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_delay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halSpiBegin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InitHighFreq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[93]"></a>params_get_eui64</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, params.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[27d]"></a>params_get_channel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, params.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>params_get_panid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, params.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>params_get_panaddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, params.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>params_get_txpower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, params.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>watchdog_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, watchdog.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>watchdog_start</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, watchdog.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>watchdog_periodic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[283]"></a>watchdog_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, watchdog.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>watchdog_reboot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, watchdog.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>etimer_request_poll</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etimer_request_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9f]"></a>etimer_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set_with_process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_ctimer_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_hello_world_process1
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_hello_world_process2
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_tcpip_process
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>

<P><STRONG><a name="[e0]"></a>etimer_reset_with_new_interval</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, etimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>

<P><STRONG><a name="[e2]"></a>etimer_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = etimer_reset &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_reset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
</UL>

<P><STRONG><a name="[e3]"></a>etimer_restart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, etimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_restart
</UL>

<P><STRONG><a name="[e5]"></a>etimer_adjust</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, etimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>

<P><STRONG><a name="[a0]"></a>etimer_expired</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_expired
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_hello_world_process1
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_hello_world_process2
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
</UL>

<P><STRONG><a name="[1e5]"></a>etimer_expiration_time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
</UL>

<P><STRONG><a name="[285]"></a>etimer_start_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, etimer.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>etimer_pending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_next_expiration_time
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e6]"></a>etimer_next_expiration_time</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = etimer_next_expiration_time
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e8]"></a>etimer_stop</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
</UL>

<P><STRONG><a name="[195]"></a>process_alloc_event</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_tcpip_process
</UL>

<P><STRONG><a name="[ea]"></a>process_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>

<P><STRONG><a name="[ec]"></a>process_post_synch</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_uipcall
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_icmp6_call
</UL>

<P><STRONG><a name="[90]"></a>process_start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_hello_world_process1
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[ed]"></a>process_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>

<P><STRONG><a name="[8f]"></a>process_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[96]"></a>process_run</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_run &rArr; do_event &rArr; do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>process_nevents</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>process_post</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_hello_world_process1
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_poll_udp
</UL>

<P><STRONG><a name="[dc]"></a>process_poll</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_rx_interrupt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
</UL>

<P><STRONG><a name="[df]"></a>timer_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[e1]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset_with_new_interval
</UL>

<P><STRONG><a name="[e4]"></a>timer_restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
</UL>

<P><STRONG><a name="[dd]"></a>timer_expired</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[f0]"></a>timer_remaining</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>

<P><STRONG><a name="[8e]"></a>rtimer_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtimer_init &rArr; rtimer_arch_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[f2]"></a>rtimer_set</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, rtimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_schedule
</UL>

<P><STRONG><a name="[f4]"></a>rtimer_run_next</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtimer_run_next &rArr; rtimer_arch_schedule &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>stimer_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stimer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbor_periodic
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
</UL>

<P><STRONG><a name="[286]"></a>stimer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stimer.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>stimer_restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_seconds
</UL>

<P><STRONG><a name="[f7]"></a>stimer_expired</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stimer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbor_periodic
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_periodic
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
</UL>

<P><STRONG><a name="[f8]"></a>stimer_remaining</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_get_least_lifetime_neighbor
</UL>

<P><STRONG><a name="[f9]"></a>stimer_elapsed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_seconds
</UL>

<P><STRONG><a name="[a1]"></a>rtimer_arch_now</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, rtimer-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtimer_arch_now
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_select
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_leds
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_hello_world_process3
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_clear
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_rx
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_calibrate_rx
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>

<P><STRONG><a name="[39]"></a>TIM2_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rtimer-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM2_IRQHandler &rArr; rtimer_run_next &rArr; rtimer_arch_schedule &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_run_next
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nevents
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[287]"></a>clock_delay_usec</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtimer-arch.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>rtimer_arch_init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, rtimer-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtimer_arch_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_init
</UL>

<P><STRONG><a name="[f3]"></a>rtimer_arch_schedule</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtimer-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtimer_arch_schedule &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_run_next
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_set
</UL>

<P><STRONG><a name="[91]"></a>ctimer_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ctimer_init &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[fe]"></a>ctimer_set_with_process</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>

<P><STRONG><a name="[100]"></a>ctimer_set</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set_with_process
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dao_lifetime_timer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_dio_interval
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dio_timer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_probing
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_periodic_timer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_unicast_dio_immediately
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_packetqueue_alloc
</UL>

<P><STRONG><a name="[101]"></a>ctimer_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ctimer_reset &rArr; etimer_reset &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[102]"></a>ctimer_restart</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ctimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
</UL>

<P><STRONG><a name="[103]"></a>ctimer_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ctimer_stop &rArr; etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_packetqueue_free
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_instance
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_cancel_dao
</UL>

<P><STRONG><a name="[104]"></a>ctimer_expired</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ctimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
</UL>

<P><STRONG><a name="[fd]"></a>list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[fb]"></a>list_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_expired
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_ctimer_process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_choose
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_lookup
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_input
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_handler_lookup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_periodic
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_packet_list
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbor_queue_from_addr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
</UL>

<P><STRONG><a name="[288]"></a>list_copy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>list_tail</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
</UL>

<P><STRONG><a name="[fc]"></a>list_remove</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_ctimer_process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_notification_rm
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_echo_reply_callback_rm
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
</UL>

<P><STRONG><a name="[ff]"></a>list_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tail
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_restart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_reset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set_with_process
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_notification_add
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_echo_reply_callback_add
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_register_input_handler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[106]"></a>list_push</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = list_push &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
</UL>

<P><STRONG><a name="[289]"></a>list_chop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>list_pop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, list.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>list_length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_packet_list
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
</UL>

<P><STRONG><a name="[107]"></a>list_insert</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
</UL>

<P><STRONG><a name="[15d]"></a>list_item_next</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_choose
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_lookup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_input
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_handler_lookup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_periodic
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbor_queue_from_addr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
</UL>

<P><STRONG><a name="[108]"></a>memb_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, memb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memb_init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[177]"></a>memb_alloc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, memb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_packetqueue_alloc
</UL>

<P><STRONG><a name="[16e]"></a>memb_free</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, memb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_packetqueue_free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_free
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_timedout
</UL>

<P><STRONG><a name="[201]"></a>memb_inmemb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, memb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memb_inmemb
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_free
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_dataptr
</UL>

<P><STRONG><a name="[1fd]"></a>memb_numfree</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, memb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_numfree
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
</UL>

<P><STRONG><a name="[92]"></a>random_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = random_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[10b]"></a>random_rand</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = random_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_compute_reachable_time
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_dio_interval
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_probing
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_periodic_timer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[99]"></a>print_stats</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, print-stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = print_stats &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_seconds
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>uip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uip6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[10d]"></a>uip_chksum</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uip6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>

<P><STRONG><a name="[110]"></a>uip_ipchksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uip6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>

<P><STRONG><a name="[112]"></a>uip_icmp6chksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_icmp6chksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_request_input
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_nd6_ns_output
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[113]"></a>uip_udpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[114]"></a>uip_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, uip6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uip_init &rArr; uip_ds6_init &rArr; uip_ds6_prefix_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_nd6_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_tcpip_process
</UL>

<P><STRONG><a name="[118]"></a>remove_ext_hdr</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uip6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_ext_hdr &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[11a]"></a>uip_udp_new</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, uip6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>

<P><STRONG><a name="[11f]"></a>uip_process</STRONG> (Thumb, 1922 bytes, Stack size 8 bytes, uip6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = uip_process &rArr; ext_hdr_options_process &rArr; rpl_verify_header &rArr; rpl_select_dag &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_input
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_lookup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_is_addr_onlink
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_lookup
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_uipcall
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_icmp6_call
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header_empty
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_insert_header
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ext_hdr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_hdr_options_process
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_input
</UL>

<P><STRONG><a name="[160]"></a>uip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uip6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
</UL>

<P><STRONG><a name="[12a]"></a>uip_send</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, uip6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[12b]"></a>uip_ds6_list_loop</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_aaddr_lookup
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_aaddr_add
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_prefix_lookup
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_prefix_add
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_add
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_lookup
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_lookup
</UL>

<P><STRONG><a name="[12c]"></a>uip_ds6_maddr_add</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
</UL>

<P><STRONG><a name="[12d]"></a>uip_ds6_addr_add</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uip_ds6_addr_add &rArr; uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_set
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_add
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
</UL>

<P><STRONG><a name="[133]"></a>uip_ds6_set_addr_iid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uip-ds6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_link_neighbor_callback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_addr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip_from_prefix
</UL>

<P><STRONG><a name="[12e]"></a>uip_ds6_prefix_add</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uip_ds6_prefix_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>

<P><STRONG><a name="[12f]"></a>uip_ds6_compute_reachable_time</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_ds6_compute_reachable_time &rArr; random_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>

<P><STRONG><a name="[115]"></a>uip_ds6_init</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uip_ds6_init &rArr; uip_ds6_prefix_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbors_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_compute_reachable_time
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_prefix_add
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_set_addr_iid
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_add
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
</UL>

<P><STRONG><a name="[135]"></a>uip_ds6_maddr_rm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uip-ds6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_rm
</UL>

<P><STRONG><a name="[122]"></a>uip_ds6_maddr_lookup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uip_ds6_maddr_lookup &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_rm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[134]"></a>uip_ds6_addr_rm</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uip_ds6_addr_rm &rArr; uip_ds6_maddr_lookup &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_rm
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
</UL>

<P><STRONG><a name="[136]"></a>uip_ds6_periodic</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uip_ds6_periodic &rArr; uip_ds6_addr_rm &rArr; uip_ds6_maddr_lookup &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_expired
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbor_periodic
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_periodic
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
</UL>

<P><STRONG><a name="[28b]"></a>uip_ds6_prefix_rm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uip-ds6.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>uip_ds6_prefix_lookup</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, uip-ds6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
</UL>

<P><STRONG><a name="[124]"></a>uip_ds6_is_addr_onlink</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uip_ds6_is_addr_onlink &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[121]"></a>uip_ds6_addr_lookup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uip_ds6_addr_lookup &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_nd6_ns_output
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
</UL>

<P><STRONG><a name="[13d]"></a>uip_ds6_get_link_local</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, uip-ds6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dio_timer
</UL>

<P><STRONG><a name="[28c]"></a>uip_ds6_get_global</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, uip-ds6.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>uip_ds6_aaddr_add</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uip-ds6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[28d]"></a>uip_ds6_aaddr_rm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uip-ds6.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>uip_ds6_aaddr_lookup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uip-ds6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
</UL>

<P><STRONG><a name="[13c]"></a>get_match_length</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_match_length
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
</UL>

<P><STRONG><a name="[128]"></a>uip_ds6_select_src</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, uip-ds6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_ds6_select_src &rArr; get_match_length
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_match_length
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_get_link_local
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_request_input
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_nd6_ns_output
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[13e]"></a>uip_nd6_ns_output</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, uip-nd6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_llao
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_lookup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[117]"></a>uip_nd6_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uip-nd6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
</UL>

<P><STRONG><a name="[58]"></a>sicslowpan_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sicslowpan_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_set_outputfunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowpan.o(.constdata)
</UL>
<P><STRONG><a name="[28e]"></a>sicslowpan_get_last_rssi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sicslowpan.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>uip_icmp6_input</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uip-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uip_icmp6_input &rArr; input_handler_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_handler_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[15e]"></a>uip_icmp6_register_input_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uip-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uip_icmp6_register_input_handler &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_icmp6_register_handlers
</UL>

<P><STRONG><a name="[11e]"></a>uip_icmp6_error_output</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, uip-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uip_icmp6_error_output &rArr; uip_ds6_select_src &rArr; get_match_length
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_invert_header
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htonl
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_hdr_options_process
</UL>

<P><STRONG><a name="[161]"></a>uip_icmp6_send</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, uip-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_ack_output
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_output
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
</UL>

<P><STRONG><a name="[163]"></a>uip_icmp6_echo_reply_callback_add</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uip-icmp6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[164]"></a>uip_icmp6_echo_reply_callback_rm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uip-icmp6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>

<P><STRONG><a name="[116]"></a>uip_icmp6_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uip-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uip_icmp6_init &rArr; uip_icmp6_register_input_handler &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_register_input_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
</UL>

<P><STRONG><a name="[167]"></a>uip_ds6_notification_add</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uip-ds6-route.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[168]"></a>uip_ds6_notification_rm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uip-ds6-route.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
</UL>

<P><STRONG><a name="[9d]"></a>uip_ds6_route_nexthop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uip_ds6_route_nexthop &rArr; uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_ipaddr_from_lladdr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
</UL>

<P><STRONG><a name="[16c]"></a>uip_ds6_route_rm</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = uip_ds6_route_rm &rArr; uip_ds6_route_nexthop &rArr; uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_debug_ipaddr_print
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_header
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
</UL>

<P><STRONG><a name="[131]"></a>uip_ds6_route_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_ds6_route_init &rArr; memb_init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_register
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>

<P><STRONG><a name="[9c]"></a>uip_ds6_route_head</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_ds6_route_head
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
</UL>

<P><STRONG><a name="[9e]"></a>uip_ds6_route_next</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_ds6_route_next
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
</UL>

<P><STRONG><a name="[174]"></a>uip_ds6_route_num_routes</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip-ds6-route.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
</UL>

<P><STRONG><a name="[171]"></a>uip_ds6_route_lookup</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_ds6_route_lookup &rArr; list_push &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_header
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header_empty
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
</UL>

<P><STRONG><a name="[172]"></a>uip_ds6_route_add</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = uip_ds6_route_add &rArr; uip_ds6_route_rm &rArr; uip_ds6_route_nexthop &rArr; uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tail
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lladdr_from_ipaddr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_lock
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_num_routes
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_route
</UL>

<P><STRONG><a name="[179]"></a>uip_ds6_route_rm_by_nexthop</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uip-ds6-route.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lladdr_from_ipaddr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist
</UL>

<P><STRONG><a name="[17a]"></a>uip_ds6_defrt_lookup</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_ds6_defrt_lookup &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbor_periodic
</UL>

<P><STRONG><a name="[17b]"></a>uip_ds6_defrt_add</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_ds6_defrt_add &rArr; uip_ds6_defrt_lookup &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_push
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_set
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_lookup
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_default_route
</UL>

<P><STRONG><a name="[17c]"></a>uip_ds6_defrt_rm</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uip_ds6_defrt_rm &rArr; call_route_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_route_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_periodic
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_default_route
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
</UL>

<P><STRONG><a name="[17d]"></a>uip_ds6_defrt_choose</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uip_ds6_defrt_choose &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[137]"></a>uip_ds6_defrt_periodic</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uip_ds6_defrt_periodic &rArr; uip_ds6_defrt_rm &rArr; call_route_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_expired
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
</UL>

<P><STRONG><a name="[17f]"></a>uip_ds6_nbr_rm</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uip-ds6-nbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uip_ds6_nbr_rm &rArr; rpl_ipv6_neighbor_callback &rArr; rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_packetqueue_free
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_ipv6_neighbor_callback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uip-ds6-nbr.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>uip_ds6_neighbors_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uip-ds6-nbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_ds6_neighbors_init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_register
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
</UL>

<P><STRONG><a name="[182]"></a>uip_ds6_nbr_add</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, uip-ds6-nbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = uip_ds6_nbr_add &rArr; rpl_ipv6_neighbor_callback &rArr; rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_packetqueue_new
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_ipv6_neighbor_callback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
</UL>

<P><STRONG><a name="[28f]"></a>uip_ds6_nbr_get_ipaddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uip-ds6-nbr.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>uip_ds6_nbr_get_ll</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uip-ds6-nbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uip_ds6_nbr_get_ll &rArr; nbr_table_get_lladdr &rArr; key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lladdr_from_ipaddr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>

<P><STRONG><a name="[185]"></a>uip_ds6_nbr_num</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uip-ds6-nbr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_print_neighbor_list
</UL>

<P><STRONG><a name="[17e]"></a>uip_ds6_nbr_lookup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uip-ds6-nbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lladdr_from_ipaddr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_choose
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>

<P><STRONG><a name="[186]"></a>uip_ds6_nbr_ll_lookup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uip-ds6-nbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_ipaddr_from_lladdr
</UL>

<P><STRONG><a name="[16b]"></a>uip_ds6_nbr_ipaddr_from_lladdr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uip-ds6-nbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_ll_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
</UL>

<P><STRONG><a name="[173]"></a>uip_ds6_nbr_lladdr_from_ipaddr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uip-ds6-nbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_get_ll
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm_by_nexthop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
</UL>

<P><STRONG><a name="[14c]"></a>uip_ds6_link_neighbor_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uip-ds6-nbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uip_ds6_link_neighbor_callback &rArr; rpl_link_neighbor_callback &rArr; rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_link_neighbor_callback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
</UL>

<P><STRONG><a name="[138]"></a>uip_ds6_neighbor_periodic</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, uip-ds6-nbr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uip_ds6_neighbor_periodic &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_expired
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
</UL>

<P><STRONG><a name="[188]"></a>uip_ds6_get_least_lifetime_neighbor</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uip-ds6-nbr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_remaining
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
</UL>

<P><STRONG><a name="[189]"></a>tcpip_output</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcpip_output &rArr; uip_log &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[15b]"></a>tcpip_set_outputfunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcpip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sicslowpan_init
</UL>

<P><STRONG><a name="[290]"></a>udp_attach</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>udp_new</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_broadcast_new
</UL>

<P><STRONG><a name="[18e]"></a>udp_broadcast_new</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>

<P><STRONG><a name="[291]"></a>icmp6_new</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tcpip.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>tcpip_icmp6_call</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpip_icmp6_call &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[162]"></a>tcpip_ipv6_output</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_packetqueue_free
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_get_ll
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_choose
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_is_addr_onlink
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_packetqueue_buflen
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_packetqueue_buf
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header_final
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_repair_root
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_split_output
</UL>

<P><STRONG><a name="[15a]"></a>tcpip_input</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpip_input &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[194]"></a>tcpip_poll_udp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>

<P><STRONG><a name="[120]"></a>tcpip_uipcall</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpip_uipcall &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[144]"></a>uip_debug_ipaddr_print</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, uip-debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uip_debug_ipaddr_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_addr
</UL>

<P><STRONG><a name="[197]"></a>uip_debug_lladdr_print</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uip-debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[183]"></a>uip_packetqueue_new</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip-packetqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
</UL>

<P><STRONG><a name="[198]"></a>uip_packetqueue_alloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uip-packetqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>

<P><STRONG><a name="[180]"></a>uip_packetqueue_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uip-packetqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uip_packetqueue_free &rArr; ctimer_stop &rArr; etimer_stop &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_rm
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[192]"></a>uip_packetqueue_buf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uip-packetqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[191]"></a>uip_packetqueue_buflen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uip-packetqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[292]"></a>uip_packetqueue_set_buflen</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uip-packetqueue.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>uip_split_output</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uip-split.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = uip_split_output &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_input
</UL>

<P><STRONG><a name="[11d]"></a>rpl_verify_header</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, rpl-ext-header.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rpl_verify_header &rArr; rpl_select_dag &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_unicast_dio_immediately
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_hdr_options_process
</UL>

<P><STRONG><a name="[123]"></a>rpl_update_header_empty</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, rpl-ext-header.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rpl_update_header_empty &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rpl_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_insert_header
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[190]"></a>rpl_update_header_final</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, rpl-ext-header.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rpl_update_header_final &rArr; rpl_find_parent &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[1a1]"></a>rpl_remove_header</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rpl-ext-header.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[15f]"></a>rpl_invert_header</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rpl-ext-header.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rpl_invert_header
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_input
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_request_input
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
</UL>

<P><STRONG><a name="[129]"></a>rpl_insert_header</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rpl-ext-header.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rpl_insert_header &rArr; rpl_update_header_empty &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[1df]"></a>rpl_get_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rpl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dao_lifetime_timer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
</UL>

<P><STRONG><a name="[1a2]"></a>rpl_set_mode</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rpl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_dao_immediately
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_cancel_dao
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
</UL>

<P><STRONG><a name="[1a6]"></a>rpl_purge_routes</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rpl_purge_routes &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[1a7]"></a>rpl_remove_routes</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rpl_remove_routes &rArr; uip_ds6_route_rm &rArr; uip_ds6_route_nexthop &rArr; uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_root
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_dag
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
</UL>

<P><STRONG><a name="[1a8]"></a>rpl_remove_routes_by_nexthop</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rpl_remove_routes_by_nexthop &rArr; uip_ds6_route_rm &rArr; uip_ds6_route_nexthop &rArr; uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_next
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_head
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
</UL>

<P><STRONG><a name="[1a9]"></a>rpl_add_route</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rpl_add_route &rArr; uip_ds6_route_add &rArr; uip_ds6_route_rm &rArr; uip_ds6_route_nexthop &rArr; uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
</UL>

<P><STRONG><a name="[187]"></a>rpl_link_neighbor_callback</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rpl_link_neighbor_callback &rArr; rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_set_addr_iid
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent_any_dag
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_link_neighbor_callback
</UL>

<P><STRONG><a name="[181]"></a>rpl_ipv6_neighbor_callback</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rpl_ipv6_neighbor_callback &rArr; rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent_any_dag
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_rm
</UL>

<P><STRONG><a name="[1ab]"></a>rpl_purge_dags</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rpl_purge_dags &rArr; rpl_free_dag &rArr; remove_parents &rArr; rpl_remove_parent &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_dag
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[196]"></a>rpl_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rpl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rpl_init &rArr; rpl_reset_periodic_timer &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_add
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_periodic_timer
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_icmp6_register_handlers
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_dag_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_tcpip_process
</UL>

<P><STRONG><a name="[1b0]"></a>rpl_get_nbr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rpl_get_nbr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rank
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbor_link_callback
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_path_metric
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_print_neighbor_list
</UL>

<P><STRONG><a name="[1b1]"></a>rpl_print_neighbor_list</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, rpl-dag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_num
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_nbr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1b4]"></a>rpl_nullify_parent</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_parent
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nullify_parents
</UL>

<P><STRONG><a name="[1b5]"></a>rpl_remove_parent</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rpl_remove_parent &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_remove
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_parents
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_callback
</UL>

<P><STRONG><a name="[1ad]"></a>rpl_dag_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rpl_dag_init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_register
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
</UL>

<P><STRONG><a name="[19e]"></a>rpl_get_parent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rpl_get_parent &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header_empty
</UL>

<P><STRONG><a name="[1b6]"></a>rpl_get_parent_rank</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rpl-dag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
</UL>

<P><STRONG><a name="[1b7]"></a>rpl_get_parent_link_metric</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rpl-dag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
</UL>

<P><STRONG><a name="[1b8]"></a>rpl_get_parent_ipaddr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rpl_get_parent_ipaddr &rArr; uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_ipaddr_from_lladdr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probing_timer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_unicast_dio_timer
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
</UL>

<P><STRONG><a name="[199]"></a>rpl_get_instance</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, rpl-dag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_invert_header
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_header
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header_empty
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_root
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dag
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_repair_root
</UL>

<P><STRONG><a name="[1be]"></a>rpl_alloc_instance</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rpl_alloc_instance &rArr; rpl_schedule_probing &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_probing
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
</UL>

<P><STRONG><a name="[1c0]"></a>rpl_alloc_dag</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rpl_alloc_dag &rArr; rpl_alloc_instance &rArr; rpl_schedule_probing &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_instance
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_root
</UL>

<P><STRONG><a name="[1ac]"></a>rpl_free_dag</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rpl_free_dag &rArr; remove_parents &rArr; rpl_remove_parent &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_parents
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_instance
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_root
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_dags
</UL>

<P><STRONG><a name="[1c3]"></a>rpl_set_root</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, rpl-dag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_dag
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[18f]"></a>rpl_repair_root</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
</UL>

<P><STRONG><a name="[1c4]"></a>rpl_set_prefix</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = rpl_set_prefix &rArr; check_prefix &rArr; uip_ds6_addr_add &rArr; uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[1c5]"></a>rpl_set_default_route</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rpl_set_default_route &rArr; uip_ds6_defrt_add &rArr; uip_ds6_defrt_lookup &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_instance
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
</UL>

<P><STRONG><a name="[293]"></a>rpl_set_default_instance</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rpl-dag.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>rpl_get_default_instance</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rpl-dag.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>rpl_free_instance</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rpl-dag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_default_route
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_dag
</UL>

<P><STRONG><a name="[1c7]"></a>rpl_add_parent</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rpl_add_parent &rArr; uip_ds6_nbr_lladdr_from_ipaddr &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lladdr_from_ipaddr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_nbr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_repair
</UL>

<P><STRONG><a name="[1a0]"></a>rpl_find_parent</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rpl_find_parent &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header_final
</UL>

<P><STRONG><a name="[1aa]"></a>rpl_find_parent_any_dag</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_link_neighbor_callback
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_ipv6_neighbor_callback
</UL>

<P><STRONG><a name="[1cb]"></a>rpl_select_parent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rpl_select_parent &rArr; best_parent &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;best_parent
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
</UL>

<P><STRONG><a name="[19b]"></a>rpl_select_dag</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rpl_select_dag &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_dao
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_parent
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_default_route
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceptable_rank
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_header
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
</UL>

<P><STRONG><a name="[1ce]"></a>rpl_move_parent</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rpl_move_parent &rArr; rpl_remove_routes_by_nexthop &rArr; uip_ds6_route_rm &rArr; uip_ds6_route_nexthop &rArr; uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
</UL>

<P><STRONG><a name="[1e1]"></a>rpl_get_any_dag</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rpl-dag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[1d0]"></a>rpl_find_of</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rpl-dag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
</UL>

<P><STRONG><a name="[1cf]"></a>rpl_join_instance</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rpl_join_instance &rArr; rpl_alloc_dag &rArr; rpl_alloc_instance &rArr; rpl_schedule_probing &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_dao
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_of
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_default_route
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[1d1]"></a>rpl_local_repair</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rpl_local_repair &rArr; nullify_parents &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nullify_parents
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
</UL>

<P><STRONG><a name="[1d2]"></a>rpl_process_parent_event</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rpl_process_parent_event &rArr; rpl_local_repair &rArr; nullify_parents &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_local_repair
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acceptable_rank
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_recalculate_ranks
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_repair
</UL>

<P><STRONG><a name="[1d3]"></a>rpl_add_dag</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rpl_add_dag &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; nullify_parents &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_of
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_parent
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_dag
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[1d5]"></a>rpl_recalculate_ranks</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rpl_recalculate_ranks &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; nullify_parents &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[1d6]"></a>rpl_process_dio</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rpl_process_dio &rArr; rpl_add_dag &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; nullify_parents &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_dao
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_prefix
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_repair
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_dag
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dag
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_send_dao
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lollipop_greater_than
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
</UL>

<P><STRONG><a name="[1d8]"></a>dio_output</STRONG> (Thumb, 608 bytes, Stack size 40 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dio_output &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set16
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set32
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probing_timer
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_unicast_dio_timer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dio_timer
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_input
</UL>

<P><STRONG><a name="[1db]"></a>dis_output</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dis_output &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_periodic_timer
</UL>

<P><STRONG><a name="[1de]"></a>dao_ack_output</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dao_ack_output &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
</UL>

<P><STRONG><a name="[19f]"></a>dao_output_target</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_mode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header_empty
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
</UL>

<P><STRONG><a name="[1a4]"></a>dao_output</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_global_addr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_mode
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
</UL>

<P><STRONG><a name="[1af]"></a>rpl_icmp6_register_handlers</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rpl_icmp6_register_handlers &rArr; uip_icmp6_register_input_handler &rArr; list_add &rArr; list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_register_input_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
</UL>

<P><STRONG><a name="[1ae]"></a>rpl_reset_periodic_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rpl_reset_periodic_timer &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
</UL>

<P><STRONG><a name="[19a]"></a>rpl_reset_dio_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_dio_interval
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_header
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_input
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_local_repair
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_root
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_repair_root
</UL>

<P><STRONG><a name="[1cd]"></a>rpl_schedule_dao</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rpl_schedule_dao &rArr; schedule_dao &rArr; set_dao_lifetime_timer &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
</UL>

<P><STRONG><a name="[1a3]"></a>rpl_schedule_dao_immediately</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rpl-timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_mode
</UL>

<P><STRONG><a name="[1a5]"></a>rpl_cancel_dao</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rpl-timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_mode
</UL>

<P><STRONG><a name="[19c]"></a>rpl_schedule_unicast_dio_immediately</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rpl_schedule_unicast_dio_immediately &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_header
</UL>

<P><STRONG><a name="[1bf]"></a>rpl_schedule_probing</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rpl_schedule_probing &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probing_timer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_instance
</UL>

<P><STRONG><a name="[151]"></a>linkaddr_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, linkaddr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_set_node_addr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_addr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_extract_linkaddr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_clear
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[158]"></a>linkaddr_cmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, linkaddr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_link_neighbor_callback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbor_queue_from_addr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_holds_broadcast
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_packet
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_check_auto_ack
</UL>

<P><STRONG><a name="[94]"></a>linkaddr_set_node_addr</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, linkaddr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = linkaddr_set_node_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[170]"></a>nbr_table_register</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nbr-table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbors_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_dag_init
</UL>

<P><STRONG><a name="[9b]"></a>nbr_table_next</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_get_bit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_item
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_key
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_get_least_lifetime_neighbor
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_num
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbor_periodic
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_recalculate_ranks
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_print_neighbor_list
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;best_parent
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nullify_parents
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_parents
</UL>

<P><STRONG><a name="[9a]"></a>nbr_table_head</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_get_bit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_key
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_get_least_lifetime_neighbor
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_num
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_neighbor_periodic
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_recalculate_ranks
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_print_neighbor_list
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;best_parent
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nullify_parents
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_parents
</UL>

<P><STRONG><a name="[176]"></a>nbr_table_add_lladdr</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nbr_table_add_lladdr &rArr; nbr_table_allocate &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_set_bit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_key
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_index
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
</UL>

<P><STRONG><a name="[175]"></a>nbr_table_get_from_lladdr</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_get_bit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_index
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_ll_lookup
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm_by_nexthop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_header
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_link_metric
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_rank
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_nbr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent
</UL>

<P><STRONG><a name="[16d]"></a>nbr_table_remove</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbr_table_remove &rArr; nbr_set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_rm
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_parent
</UL>

<P><STRONG><a name="[178]"></a>nbr_table_lock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbr_table_lock &rArr; nbr_set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
</UL>

<P><STRONG><a name="[1b3]"></a>nbr_table_unlock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbr_table_unlock &rArr; nbr_set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_preferred_parent
</UL>

<P><STRONG><a name="[16a]"></a>nbr_table_get_lladdr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nbr_table_get_lladdr &rArr; key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_item
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_get_ll
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop_lladdr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_print_neighbor_list
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_nbr
</UL>

<P><STRONG><a name="[1f1]"></a>packetbuf_attr_clear</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, packetbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packetbuf_attr_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_clear
</UL>

<P><STRONG><a name="[14f]"></a>packetbuf_clear</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, packetbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packetbuf_clear &rArr; packetbuf_attr_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyfrom
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pollhandler
</UL>

<P><STRONG><a name="[295]"></a>packetbuf_clear_hdr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, packetbuf.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>packetbuf_copyfrom</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, packetbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = packetbuf_copyfrom &rArr; packetbuf_clear &rArr; packetbuf_attr_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_clear
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
</UL>

<P><STRONG><a name="[14a]"></a>packetbuf_datalen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, packetbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_hc06
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_totlen
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_compact
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_packet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[1f3]"></a>packetbuf_compact</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, packetbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
</UL>

<P><STRONG><a name="[1f4]"></a>packetbuf_copyto_hdr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, packetbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1f5]"></a>packetbuf_copyto</STRONG> (Thumb, 190 bytes, Stack size 1024 bytes, packetbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = packetbuf_copyto &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_update_from_packetbuf
</UL>

<P><STRONG><a name="[1f8]"></a>packetbuf_hdrlen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, packetbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_totlen
</UL>

<P><STRONG><a name="[1f7]"></a>packetbuf_totlen</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, packetbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = packetbuf_totlen
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdralloc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[1f9]"></a>packetbuf_hdralloc</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, packetbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packetbuf_hdralloc &rArr; packetbuf_totlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_totlen
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[296]"></a>packetbuf_hdr_remove</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, packetbuf.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>packetbuf_hdrreduce</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, packetbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_packet
</UL>

<P><STRONG><a name="[153]"></a>packetbuf_set_datalen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, packetbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pollhandler
</UL>

<P><STRONG><a name="[150]"></a>packetbuf_dataptr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, packetbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_packet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pollhandler
</UL>

<P><STRONG><a name="[211]"></a>packetbuf_hdrptr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, packetbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[1fa]"></a>packetbuf_attr_copyto</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, packetbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = packetbuf_attr_copyto &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_update_from_packetbuf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_update_attr_from_packetbuf
</UL>

<P><STRONG><a name="[1fb]"></a>packetbuf_attr_copyfrom</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, packetbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = packetbuf_attr_copyfrom &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
</UL>

<P><STRONG><a name="[141]"></a>packetbuf_set_attr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, packetbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_packet_attrs
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[157]"></a>packetbuf_attr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, packetbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>

<P><STRONG><a name="[14e]"></a>packetbuf_set_addr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, packetbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = packetbuf_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_packet
</UL>

<P><STRONG><a name="[149]"></a>packetbuf_addr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, packetbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_link_neighbor_callback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_hc06
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_header
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header_empty
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_packet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[1fc]"></a>packetbuf_holds_broadcast</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, packetbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = packetbuf_holds_broadcast &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[95]"></a>queuebuf_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, queuebuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queuebuf_init &rArr; memb_init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[152]"></a>queuebuf_numfree</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, queuebuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queuebuf_numfree
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_numfree
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
</UL>

<P><STRONG><a name="[154]"></a>queuebuf_new_from_packetbuf</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, queuebuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = queuebuf_new_from_packetbuf &rArr; packetbuf_copyto &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyto
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyto
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[1fe]"></a>queuebuf_update_attr_from_packetbuf</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queuebuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queuebuf_update_attr_from_packetbuf &rArr; packetbuf_attr_copyto &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_load_to_ram
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyto
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
</UL>

<P><STRONG><a name="[200]"></a>queuebuf_update_from_packetbuf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, queuebuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_load_to_ram
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyto
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyto
</UL>

<P><STRONG><a name="[156]"></a>queuebuf_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queuebuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = queuebuf_free &rArr; memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_inmemb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
</UL>

<P><STRONG><a name="[155]"></a>queuebuf_to_packetbuf</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, queuebuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = queuebuf_to_packetbuf &rArr; packetbuf_copyfrom &rArr; packetbuf_clear &rArr; packetbuf_attr_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_inmemb
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_load_to_ram
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyfrom
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_list
</UL>

<P><STRONG><a name="[202]"></a>queuebuf_dataptr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queuebuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_inmemb
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_load_to_ram
</UL>

<P><STRONG><a name="[203]"></a>queuebuf_datalen</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queuebuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_load_to_ram
</UL>

<P><STRONG><a name="[204]"></a>queuebuf_addr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queuebuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_load_to_ram
</UL>

<P><STRONG><a name="[205]"></a>queuebuf_attr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, queuebuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queuebuf_attr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_load_to_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
</UL>

<P><STRONG><a name="[297]"></a>queuebuf_debug_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, queuebuf.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>frame802154_get_pan_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frame802154.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_check_dest_panid
</UL>

<P><STRONG><a name="[298]"></a>frame802154_set_pan_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, frame802154.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>frame802154_has_panid</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, frame802154.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = frame802154_has_panid
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_check_dest_panid
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_len
</UL>

<P><STRONG><a name="[206]"></a>frame802154_check_dest_panid</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, frame802154.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_has_panid
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_get_pan_id
</UL>

<P><STRONG><a name="[20a]"></a>frame802154_is_broadcast_addr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, frame802154.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frame802154_is_broadcast_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_extract_linkaddr
</UL>

<P><STRONG><a name="[209]"></a>frame802154_extract_linkaddr</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, frame802154.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_is_broadcast_addr
</UL>

<P><STRONG><a name="[20d]"></a>frame802154_hdrlen</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, frame802154.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = frame802154_hdrlen &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_len
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[20e]"></a>frame802154_create</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, frame802154.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = frame802154_create &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_len
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[20f]"></a>frame802154_parse</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, frame802154.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = frame802154_parse &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_has_panid
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_packet
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_check_auto_ack
</UL>

<P><STRONG><a name="[216]"></a>mac_call_sent_callback</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mac_call_sent_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
</UL>

<P><STRONG><a name="[1c]"></a>SysTick_Handler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; etimer_request_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_next_expiration_time
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_pending
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>clock_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[da]"></a>clock_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remaining
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_link_neighbor_callback
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_print_neighbor_list
</UL>

<P><STRONG><a name="[c2]"></a>clock_delay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_blink
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
</UL>

<P><STRONG><a name="[98]"></a>clock_seconds</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_elapsed
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_remaining
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_expired
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_restart
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_stats
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
</UL>

<P><STRONG><a name="[299]"></a>BSP_GetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_io.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>BSP_PB_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f10x_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_PB_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[219]"></a>BSP_PB_GetState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value
</UL>

<P><STRONG><a name="[c8]"></a>cc1200_rx_interrupt</STRONG> (Thumb, 958 bytes, Stack size 24 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cc1200_rx_interrupt &rArr; addr_check_auto_ack &rArr; idle_tx_rx &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burst_read
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_check_auto_ack
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_read
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_rx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_int_handler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pollhandler
</UL>

<P><STRONG><a name="[79]"></a>send_list</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sicslowmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = send_list &rArr; send_packet &rArr; frame802154_create &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowmac.o(.constdata)
</UL>
<P><STRONG><a name="[238]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10c]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
</UL>

<P><STRONG><a name="[10a]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_init
</UL>

<P><STRONG><a name="[29a]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_rx_interrupt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_input
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_request_input
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_ipv6
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_hc06
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_addr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_nd6_ns_output
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_aaddr_add
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_prefix_add
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_maddr_add
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyfrom
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr_copyto
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyto
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyto_hdr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyfrom
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_global_addr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_prefix
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_root
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip_from_prefix
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output_target
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_prefix
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_reply_input
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_request_input
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ext_hdr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_header
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rpl_opt
</UL>

<P><STRONG><a name="[29b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[29d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_addr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip_from_prefix
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_dag
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_alloc_instance
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[29f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[127]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_lookup
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_context_lookup_by_prefix
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_list_loop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_is_addr_onlink
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_input
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_root
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dag
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_routes_by_nexthop
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2a0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2a1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2a2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a5]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[83]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_schedule
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_rx_interrupt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_select
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_hello_world_process3
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_stats
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rng_get_uint8
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_processes
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_add
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_debug_ipaddr_print
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_hc06
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_hc06
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_addr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_packet_list
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_print_neighbor_list
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_debug_lladdr_print
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_packet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_clear
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_rx
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiving_packet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_calibrate_rx
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[240]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a6]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[1f6]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_copyto
</UL>

<P><STRONG><a name="[2a7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2a8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2a9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[86]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_processes
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[84]"></a>ipaddr_add</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipaddr_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>print_processes</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[0]"></a>process_thread_hello_world_process2</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hello-world1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_thread_hello_world_process2 &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hello-world1.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>process_thread_hello_world_process3</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hello-world1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = process_thread_hello_world_process3 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hello-world1.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>process_thread_hello_world_process1</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hello-world1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = process_thread_hello_world_process1 &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hello-world1.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>SetSysClockTo48</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo48
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[a4]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo48
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo48
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bd]"></a>show_leds</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, leds.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_arch_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_on
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_toggle
</UL>

<P><STRONG><a name="[d0]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cc1200-arch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio2_enable_irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_enable_irq
</UL>

<P><STRONG><a name="[d1]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cc1200-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio2_enable_irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_enable_irq
</UL>

<P><STRONG><a name="[d3]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cc1200-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio2_disable_irq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_disable_irq
</UL>

<P><STRONG><a name="[cf]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cc1200-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio2_enable_irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_enable_irq
</UL>

<P><STRONG><a name="[d9]"></a>update_time</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_adjust
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
</UL>

<P><STRONG><a name="[3]"></a>process_thread_etimer_process</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = process_thread_etimer_process &rArr; timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> etimer.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>add_timer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset_with_new_interval
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>

<P><STRONG><a name="[e9]"></a>exit_process</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_is_running
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_exit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>

<P><STRONG><a name="[eb]"></a>call_process</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>

<P><STRONG><a name="[ee]"></a>do_poll</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
</UL>

<P><STRONG><a name="[ef]"></a>do_event</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = do_event &rArr; do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
</UL>

<P><STRONG><a name="[4]"></a>process_thread_ctimer_process</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ctimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = process_thread_ctimer_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctimer.o(.data)
</UL>
<P><STRONG><a name="[10e]"></a>chksum</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, uip6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>

<P><STRONG><a name="[111]"></a>upper_layer_chksum</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uip6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_htons
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
</UL>

<P><STRONG><a name="[11c]"></a>ext_hdr_options_process</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, uip6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ext_hdr_options_process &rArr; rpl_verify_header &rArr; rpl_select_dag &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_error_output
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_verify_header
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[13f]"></a>create_llao</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uip-nd6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_nd6_ns_output
</UL>

<P><STRONG><a name="[140]"></a>set_packet_attrs</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_packet_attrs
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
</UL>

<P><STRONG><a name="[142]"></a>addr_context_lookup_by_prefix</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = addr_context_lookup_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_hc06
</UL>

<P><STRONG><a name="[148]"></a>addr_context_lookup_by_number</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sicslowpan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_hc06
</UL>

<P><STRONG><a name="[146]"></a>compress_addr_64</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compress_addr_64
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_hc06
</UL>

<P><STRONG><a name="[143]"></a>uncompress_addr</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uncompress_addr &rArr; uip_debug_ipaddr_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_debug_ipaddr_print
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_set_addr_iid
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_hc06
</UL>

<P><STRONG><a name="[145]"></a>compress_hdr_hc06</STRONG> (Thumb, 2068 bytes, Stack size 32 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = compress_hdr_hc06 &rArr; addr_context_lookup_by_prefix &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_addr_64
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_context_lookup_by_prefix
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
</UL>

<P><STRONG><a name="[147]"></a>uncompress_hdr_hc06</STRONG> (Thumb, 1578 bytes, Stack size 32 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uncompress_hdr_hc06 &rArr; uncompress_addr &rArr; uip_debug_ipaddr_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_addr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_context_lookup_by_number
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input
</UL>

<P><STRONG><a name="[14b]"></a>compress_hdr_ipv6</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = compress_hdr_ipv6 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
</UL>

<P><STRONG><a name="[4a]"></a>packet_sent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = packet_sent &rArr; uip_ds6_link_neighbor_callback &rArr; rpl_link_neighbor_callback &rArr; rpl_find_parent_any_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_link_neighbor_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowpan.o(.text)
</UL>
<P><STRONG><a name="[14d]"></a>send_packet</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_packet &rArr; packetbuf_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_periodic
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output
</UL>

<P><STRONG><a name="[4b]"></a>output</STRONG> (Thumb, 1466 bytes, Stack size 40 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = output &rArr; queuebuf_new_from_packetbuf &rArr; packetbuf_copyto &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_numfree
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_free
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_datalen
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_clear
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_ipv6
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compress_hdr_hc06
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_packet_attrs
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowpan.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>input</STRONG> (Thumb, 1404 bytes, Stack size 48 bytes, sicslowpan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = input &rArr; uncompress_hdr_hc06 &rArr; uncompress_addr &rArr; uip_debug_ipaddr_print &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uncompress_hdr_hc06
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_packet_attrs
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowpan.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>input_handler_lookup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uip-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = input_handler_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_input
</UL>

<P><STRONG><a name="[5]"></a>echo_request_input</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, uip-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = echo_request_input &rArr; uip_ds6_select_src &rArr; get_match_length
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_invert_header
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_select_src
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6chksum
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uip-icmp6.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>echo_reply_input</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, uip-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = echo_reply_input &rArr; rpl_invert_header
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_invert_header
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uip-icmp6.o(.data)
</UL>
<P><STRONG><a name="[165]"></a>call_route_callback</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = call_route_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_rm
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_defrt_add
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_add
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
</UL>

<P><STRONG><a name="[169]"></a>uip_ds6_route_nexthop_lladdr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uip_ds6_route_nexthop_lladdr &rArr; nbr_table_get_lladdr &rArr; key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
</UL>

<P><STRONG><a name="[16f]"></a>rm_routelist</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rm_routelist &rArr; uip_ds6_route_rm &rArr; uip_ds6_route_nexthop &rArr; uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_remove
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_rm_by_nexthop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist_callback
</UL>

<P><STRONG><a name="[4c]"></a>rm_routelist_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uip-ds6-route.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rm_routelist_callback &rArr; rm_routelist &rArr; uip_ds6_route_rm &rArr; uip_ds6_route_nexthop &rArr; uip_ds6_nbr_ipaddr_from_lladdr &rArr; uip_ds6_nbr_ll_lookup &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_routelist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uip-ds6-route.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>check_for_tcp_syn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcpip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_input
</UL>

<P><STRONG><a name="[18a]"></a>packet_input</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = packet_input &rArr; uip_process &rArr; ext_hdr_options_process &rArr; rpl_verify_header &rArr; rpl_select_dag &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_tcp_syn
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_split_output
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
</UL>

<P><STRONG><a name="[193]"></a>eventhandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = eventhandler &rArr; packet_input &rArr; uip_process &rArr; ext_hdr_options_process &rArr; rpl_verify_header &rArr; rpl_select_dag &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_input
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_ipv6_output
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_periodic
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_tcpip_process
</UL>

<P><STRONG><a name="[7]"></a>process_thread_tcpip_process</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = process_thread_tcpip_process &rArr; eventhandler &rArr; packet_input &rArr; uip_process &rArr; ext_hdr_options_process &rArr; rpl_verify_header &rArr; rpl_select_dag &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_alloc_event
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventhandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>packet_timedout</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uip-packetqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = packet_timedout &rArr; memb_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uip-packetqueue.o(.text)
</UL>
<P><STRONG><a name="[19d]"></a>set_rpl_opt</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, rpl-ext-header.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_rpl_opt &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_update_header_empty
</UL>

<P><STRONG><a name="[1b2]"></a>rpl_set_preferred_parent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rpl_set_preferred_parent &rArr; nbr_table_lock &rArr; nbr_set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_move_parent
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_parent
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_root
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
</UL>

<P><STRONG><a name="[4e]"></a>nbr_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nbr_callback &rArr; rpl_remove_parent &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_parent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-dag.o(.text)
</UL>
<P><STRONG><a name="[1bc]"></a>lollipop_greater_than</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rpl-dag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_send_dao
</UL>

<P><STRONG><a name="[1b9]"></a>remove_parents</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = remove_parents &rArr; rpl_remove_parent &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_remove_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_repair
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_dag
</UL>

<P><STRONG><a name="[1ba]"></a>nullify_parents</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = nullify_parents &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_nullify_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_local_repair
</UL>

<P><STRONG><a name="[1bb]"></a>should_send_dao</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = should_send_dao
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lollipop_greater_than
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[1cc]"></a>acceptable_rank</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = acceptable_rank
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
</UL>

<P><STRONG><a name="[1bd]"></a>get_dag</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_dag &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[1c1]"></a>set_ip_from_prefix</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_ip_from_prefix &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_set_addr_iid
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_prefix
</UL>

<P><STRONG><a name="[1c2]"></a>check_prefix</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = check_prefix &rArr; uip_ds6_addr_add &rArr; uip_ds6_maddr_add &rArr; uip_ds6_list_loop &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_rm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_add
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_addr_lookup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip_from_prefix
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_join_instance
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_set_prefix
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_free_dag
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_dag
</UL>

<P><STRONG><a name="[1c8]"></a>find_parent_any_dag_any_instance</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_get_ll
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_dag
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent_any_dag
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent
</UL>

<P><STRONG><a name="[1c9]"></a>find_parent_dag</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = find_parent_dag &rArr; find_parent_any_dag_any_instance &rArr; uip_ds6_nbr_lookup &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_parent_any_dag_any_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_dag
</UL>

<P><STRONG><a name="[1ca]"></a>best_parent</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = best_parent &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_select_parent
</UL>

<P><STRONG><a name="[1d4]"></a>global_repair</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, rpl-dag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = global_repair &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; nullify_parents &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_parent_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_parent
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_parents
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
</UL>

<P><STRONG><a name="[1d7]"></a>get_global_addr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_global_addr &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
</UL>

<P><STRONG><a name="[1dd]"></a>get32</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rpl-icmp6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
</UL>

<P><STRONG><a name="[1da]"></a>set32</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
</UL>

<P><STRONG><a name="[1dc]"></a>get16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rpl-icmp6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_input
</UL>

<P><STRONG><a name="[1d9]"></a>set16</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set16
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
</UL>

<P><STRONG><a name="[8]"></a>dis_input</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dis_input &rArr; dio_output &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-icmp6.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>dio_input</STRONG> (Thumb, 748 bytes, Stack size 144 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dio_input &rArr; rpl_process_dio &rArr; rpl_add_dag &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; nullify_parents &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get16
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get32
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_process_dio
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-icmp6.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>dao_input</STRONG> (Thumb, 640 bytes, Stack size 112 bytes, rpl-icmp6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dao_input &rArr; dao_ack_output &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stimer_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_nexthop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_add
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_nbr_lookup
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_route_lookup
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_icmp6_send
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_ack_output
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_add_route
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_instance
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_find_parent
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-icmp6.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>dao_ack_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rpl-icmp6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rpl-icmp6.o(.data)
</UL>
<P><STRONG><a name="[1e0]"></a>calculate_path_metric</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rpl-mrhof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = calculate_path_metric &rArr; rpl_get_nbr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_nbr
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;best_parent
</UL>

<P><STRONG><a name="[c]"></a>reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rpl-mrhof.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>neighbor_link_callback</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, rpl-mrhof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = neighbor_link_callback &rArr; rpl_get_nbr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_nbr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>calculate_rank</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rpl-mrhof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = calculate_rank &rArr; rpl_get_nbr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_nbr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>best_dag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rpl-mrhof.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>best_parent</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, rpl-mrhof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = best_parent &rArr; calculate_path_metric &rArr; rpl_get_nbr &rArr; nbr_table_get_from_lladdr &rArr; index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_path_metric
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>update_metric_container</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rpl-mrhof.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rpl-mrhof.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>handle_periodic_timer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = handle_periodic_timer &rArr; rpl_recalculate_ranks &rArr; rpl_process_parent_event &rArr; rpl_local_repair &rArr; nullify_parents &rArr; rpl_nullify_parent &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_reset
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dis_output
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_recalculate_ranks
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_any_dag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_dags
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_purge_routes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-timers.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>handle_dio_timer</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = handle_dio_timer &rArr; dio_output &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_get_link_local
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_dio_interval
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-timers.o(.text)
</UL>
<P><STRONG><a name="[1e2]"></a>new_dio_interval</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dio_timer
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_reset_dio_timer
</UL>

<P><STRONG><a name="[51]"></a>handle_dao_timer</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = handle_dao_timer &rArr; dao_output &rArr; dao_output_target &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ds6_get_link_local
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dao_lifetime_timer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dao_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-timers.o(.text)
</UL>
<P><STRONG><a name="[1e3]"></a>set_dao_lifetime_timer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_dao_lifetime_timer &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_dao
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dao_timer
</UL>

<P><STRONG><a name="[1e4]"></a>schedule_dao</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = schedule_dao &rArr; set_dao_lifetime_timer &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expiration_time
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expired
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dao_lifetime_timer
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_dao
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_dao_immediately
</UL>

<P><STRONG><a name="[52]"></a>handle_unicast_dio_timer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = handle_unicast_dio_timer &rArr; dio_output &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-timers.o(.text)
</UL>
<P><STRONG><a name="[1e6]"></a>get_probing_target</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_probing_target &rArr; nbr_table_head &rArr; nbr_table_next &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probing_timer
</UL>

<P><STRONG><a name="[53]"></a>handle_probing_timer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, rpl-timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = handle_probing_timer &rArr; dio_output &rArr; uip_icmp6_send &rArr; tcpip_ipv6_output &rArr; rpl_repair_root &rArr; rpl_reset_dio_timer &rArr; new_dio_interval &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_probing_target
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dio_output
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_schedule_probing
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rpl_get_parent_ipaddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rpl-timers.o(.text)
</UL>
<P><STRONG><a name="[1ec]"></a>key_from_index</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nbr-table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_item
</UL>

<P><STRONG><a name="[1e9]"></a>item_from_index</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nbr-table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_key
</UL>

<P><STRONG><a name="[1e8]"></a>index_from_key</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nbr-table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_lladdr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_key
</UL>

<P><STRONG><a name="[1eb]"></a>index_from_item</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nbr-table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_set_bit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_get_bit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_item
</UL>

<P><STRONG><a name="[1e7]"></a>item_from_key</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = item_from_key
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_key
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_index
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
</UL>

<P><STRONG><a name="[1ea]"></a>key_from_item</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = key_from_item
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_item
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_from_index
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_lladdr
</UL>

<P><STRONG><a name="[1ed]"></a>index_from_lladdr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = index_from_lladdr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_key
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
</UL>

<P><STRONG><a name="[1ee]"></a>nbr_get_bit</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_item
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_next
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_head
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_get_from_lladdr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_allocate
</UL>

<P><STRONG><a name="[1ef]"></a>nbr_set_bit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nbr_set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_item
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_remove
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_lock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_unlock
</UL>

<P><STRONG><a name="[1f0]"></a>nbr_table_allocate</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, nbr-table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nbr_table_allocate &rArr; nbr_get_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_get_bit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_from_key
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_from_key
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbr_table_add_lladdr
</UL>

<P><STRONG><a name="[1ff]"></a>queuebuf_load_to_ram</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queuebuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_to_packetbuf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_attr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_addr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_datalen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_dataptr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_update_from_packetbuf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_update_attr_from_packetbuf
</UL>

<P><STRONG><a name="[20b]"></a>field_len</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, frame802154.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_has_panid
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_len
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_create
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_hdrlen
</UL>

<P><STRONG><a name="[20c]"></a>addr_len</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, frame802154.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;field_len
</UL>

<P><STRONG><a name="[210]"></a>create_frame</STRONG> (Thumb, 322 bytes, Stack size 88 bytes, framer-802154.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = create_frame &rArr; frame802154_create &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_create
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_hdrlen
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_get_pan_id
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_holds_broadcast
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdrptr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdralloc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdr_length
</UL>

<P><STRONG><a name="[5a]"></a>hdr_length</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, framer-802154.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = hdr_length &rArr; create_frame &rArr; frame802154_create &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framer-802154.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>create</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, framer-802154.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = create &rArr; create_frame &rArr; frame802154_create &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framer-802154.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>parse</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, framer-802154.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = parse &rArr; frame802154_parse &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_is_broadcast_addr
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_get_pan_id
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdrreduce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framer-802154.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>neighbor_queue_from_addr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = neighbor_queue_from_addr &rArr; linkaddr_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[215]"></a>default_timebase</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = default_timebase
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
</UL>

<P><STRONG><a name="[214]"></a>free_packet</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = free_packet &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_numfree
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_stop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_free
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_timebase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_sent
</UL>

<P><STRONG><a name="[55]"></a>packet_sent</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = packet_sent &rArr; free_packet &rArr; ctimer_set &rArr; ctimer_set_with_process &rArr; etimer_set &rArr; add_timer &rArr; update_time
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_item_next
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_call_sent_callback
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_packet
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_timebase
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_attr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_update_attr_from_packetbuf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>transmit_packet_list</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = transmit_packet_list &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>send_packet</STRONG> (Thumb, 754 bytes, Stack size 40 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = send_packet &rArr; queuebuf_new_from_packetbuf &rArr; packetbuf_copyto &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_numfree
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_free
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_alloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_length
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_attr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_head
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctimer_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queuebuf_new_from_packetbuf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_call_sent_callback
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;neighbor_queue_from_addr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>input_packet</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = input_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>on</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>channel_check_interval</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = channel_check_interval
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, csma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init &rArr; memb_init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memb_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csma.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nullsec.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nullsec.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nullsec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nullsec.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>input</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nullsec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nullsec.o(.constdata)
</UL>
<P><STRONG><a name="[217]"></a>init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, button-sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init &rArr; BSP_PB_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[21a]"></a>activate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, button-sensor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[21b]"></a>deactivate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, button-sensor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[21c]"></a>active</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button-sensor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status
</UL>

<P><STRONG><a name="[66]"></a>value</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, button-sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = value &rArr; BSP_PB_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button-sensor.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>configure</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, button-sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = configure &rArr; init &rArr; BSP_PB_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deactivate
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activate
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button-sensor.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>status</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, button-sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = status
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button-sensor.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>read</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_attr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pollhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[21f]"></a>strobe</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw_byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_deselect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_select
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_rx
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_calibrate_rx
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state
</UL>

<P><STRONG><a name="[220]"></a>single_write</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = single_write &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw_byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_deselect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_select
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg_settings
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_txpower
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cca_threshold
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off
</UL>

<P><STRONG><a name="[221]"></a>state</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobe
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_rx_interrupt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_clear
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_rx
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_calibrate_rx
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>

<P><STRONG><a name="[222]"></a>idle</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio2_disable_irq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_disable_irq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobe
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_check_auto_ack
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off
</UL>

<P><STRONG><a name="[72]"></a>off</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = off &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobe
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_value
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_clear
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[223]"></a>calibrate</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calibrate &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_seconds
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobe
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_calibrate_rx
</UL>

<P><STRONG><a name="[224]"></a>idle_calibrate_rx</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = idle_calibrate_rx &rArr; calibrate &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio2_enable_irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_enable_irq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobe
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
</UL>

<P><STRONG><a name="[71]"></a>on</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on &rArr; idle_calibrate_rx &rArr; calibrate &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_read_pin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_deselect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_select
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_calibrate_rx
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_value
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_clear
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>receiving_packet</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = receiving_packet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_read_pin
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[226]"></a>set_channel</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_channel &rArr; on &rArr; idle_calibrate_rx &rArr; calibrate &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiving_packet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_calibrate_rx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_value
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pollhandler
</UL>

<P><STRONG><a name="[227]"></a>rx_rx</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_rx &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio2_enable_irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_enable_irq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobe
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_rx_interrupt
</UL>

<P><STRONG><a name="[228]"></a>burst_write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = burst_write &rArr; cc1200_arch_spi_rw &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw_byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_deselect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_select
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
</UL>

<P><STRONG><a name="[229]"></a>single_read</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = single_read &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw_byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_deselect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_select
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_rx_interrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_clear
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_txpower
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
</UL>

<P><STRONG><a name="[22a]"></a>idle_tx_rx</STRONG> (Thumb, 766 bytes, Stack size 48 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = idle_tx_rx &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio2_read_pin
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_read_pin
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_read
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;burst_write
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strobe
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_check_auto_ack
</UL>

<P><STRONG><a name="[22d]"></a>is_broadcast_addr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_broadcast_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_check_auto_ack
</UL>

<P><STRONG><a name="[22c]"></a>addr_check_auto_ack</STRONG> (Thumb, 150 bytes, Stack size 80 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = addr_check_auto_ack &rArr; idle_tx_rx &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_broadcast_addr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_rx_interrupt
</UL>

<P><STRONG><a name="[22e]"></a>burst_read</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = burst_read &rArr; cc1200_arch_spi_rw &rArr; halSpiWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw_byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_deselect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_select
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_rx_interrupt
</UL>

<P><STRONG><a name="[22f]"></a>pollhandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pollhandler &rArr; cc1200_rx_interrupt &rArr; addr_check_auto_ack &rArr; idle_tx_rx &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_rx_interrupt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_datalen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_clear
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cc1200_process
</UL>

<P><STRONG><a name="[12]"></a>process_thread_cc1200_process</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = process_thread_cc1200_process &rArr; pollhandler &rArr; cc1200_rx_interrupt &rArr; addr_check_auto_ack &rArr; idle_tx_rx &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pollhandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.data)
</UL>
<P><STRONG><a name="[230]"></a>update_cca_threshold</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = update_cca_threshold &rArr; single_write &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_clear
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[231]"></a>update_txpower</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = update_txpower &rArr; single_read &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[232]"></a>write_reg_settings</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_reg_settings &rArr; single_write &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[233]"></a>reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = reset &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_rw_byte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_deselect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_spi_select
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[234]"></a>configure</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = configure &rArr; write_reg_settings &rArr; single_write &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg_settings
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_write
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[69]"></a>init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = init &rArr; set_channel &rArr; on &rArr; idle_calibrate_rx &rArr; calibrate &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio2_setup_irq
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_setup_irq
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_txpower
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cca_threshold
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>prepare</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prepare &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>channel_clear</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = channel_clear &rArr; on &rArr; idle_calibrate_rx &rArr; calibrate &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_read_pin
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cca_threshold
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>transmit</STRONG> (Thumb, 518 bytes, Stack size 24 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = transmit &rArr; idle_tx_rx &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio2_enable_irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cc1200_arch_gpio0_enable_irq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtimer_arch_now
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_clear
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_txpower
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_tx_rx
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_calibrate_rx
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = send &rArr; transmit &rArr; idle_tx_rx &rArr; idle &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>pending_packet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cc1200.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>get_value</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, cc1200.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>set_value</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, cc1200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_value &rArr; set_channel &rArr; on &rArr; idle_calibrate_rx &rArr; calibrate &rArr; state &rArr; strobe &rArr; cc1200_arch_spi_select &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>get_object</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cc1200.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>set_object</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cc1200.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cc1200.o(.constdata)
</UL>
<P><STRONG><a name="[237]"></a>is_broadcast_addr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sicslowmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_broadcast_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_packet
</UL>

<P><STRONG><a name="[78]"></a>send_packet</STRONG> (Thumb, 328 bytes, Stack size 112 bytes, sicslowmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = send_packet &rArr; frame802154_create &rArr; field_len &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_copy
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_create
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_hdrlen
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_holds_broadcast
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdrptr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdralloc
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_totlen
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowmac.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>input_packet</STRONG> (Thumb, 378 bytes, Stack size 128 bytes, sicslowmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = input_packet &rArr; frame802154_parse &rArr; frame802154_has_panid
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_set_addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_dataptr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_datalen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_addr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkaddr_cmp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame802154_parse
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetbuf_hdrreduce
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_broadcast_addr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowmac.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>on</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sicslowmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowmac.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sicslowmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowmac.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sicslowmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init &rArr; random_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sicslowmac.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>channel_check_interval</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sicslowmac.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sicslowmac.o(.constdata)
</UL>
<P><STRONG><a name="[23f]"></a>_printf_core</STRONG> (Thumb, 988 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[242]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[241]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[57]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
